<!-- views/account-settings.ejs (Versión sin estilos) -->
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configuración de Cuenta - NeuroDiverse</title>
    <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"/>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    rel="stylesheet"/>
  <link rel="stylesheet" href="/css/homestyle.css" />
  <link rel="stylesheet" href="/css/style.css" />
  <link rel="stylesheet" href="/css/settingstyle.css" />
  <link rel="stylesheet" href="/css/popupstyles.css" />
</head>

<body>
    <%- include('partials/first-nav') %> 
    <%- include('partials/navbar') %>
    <%- include('partials/sidebar') %>
    <%- include('partials/cart') %>
    <%- include('partials/login-modal') %>
    <%- include('partials/popups') %>
    <h2 class="registro-titulo">Configuracion de Cuenta</h2>
    <!-- Contenido principal -->
    <main class="registro-container">
        

       

        <div class="registro-imagen">
            <img src="/img/background.png" alt="Administrar cuenta">
        </div>

        
        
        <div class="registro-formulario">
            <!-- Sección: Datos Personales -->
            <h3 class="registro-subtitulo">Datos Personales</h3>
            <input type="email" id="email" class="registro-input" placeholder="Correo Electrónico" required>
            <p id="email-error" class="error-message"></p>

            <input type="password" id="password" class="registro-input hidden" placeholder="Contraseña" required>
            <p id="password-tip" class="form-tip hidden">Debe tener al menos 12 caracteres, una mayúscula, una minúscula, un número y un símbolo.</p>
            <p id="password-error" class="error-message"></p>

            <!-- Botón para activar edición de contraseña -->
            <button id="edit-password-btn" class="registro-boton" type="button">Editar contraseña 🔑</button>

            <input type="text" id="first-name" class="registro-input" placeholder="Nombre" required>
            <p id="first-name-error" class="error-message"></p>

            <input type="text" id="last-name" class="registro-input" placeholder="Apellido" required>
            <p id="last-name-error" class="error-message"></p>

            <label for="birth-date">Fecha de Nacimiento:</label>
            <input type="date" id="birth-date" class="registro-input" required>
            <p id="birth-date-error" class="error-message"></p>

            <input type="text" id="mobile-phone" class="registro-input" placeholder="Teléfono/Móvil" required>
            <p id="mobile-phone-error" class="error-message"></p>

            <hr>

            <!-- Sección: Datos para el Envío -->
            <h3 class="registro-subtitulo">Datos para el Envío</h3>
            <input type="text" id="rut" class="registro-input" placeholder="RUT (Ej: 12.345.678-9)" required>
            <p id="rut-error" class="error-message"></p>

            <p class="registro-info">📌 Por el momento, solo realizamos envíos dentro de la Región Metropolitana.</p>

            <label for="region">Región:</label>
            <select id="region" class="registro-input" disabled>
                <option value="Santiago" selected>Región Metropolitana</option>
            </select>

            <label for="comuna">Comuna:</label>
            <select id="comuna" class="registro-input" required>
                <option value="" selected disabled>Selecciona tu comuna</option>
                <option value="Cerrillos">Cerrillos</option>
                <option value="Cerro Navia">Cerro Navia</option>
                <option value="Conchali">Conchalí</option>
                <option value="El Bosque">El Bosque</option>
                <option value="Estacion Central">Estación Central</option>
                <option value="Huechuraba">Huechuraba</option>
                <option value="Independencia">Independencia</option>
                <option value="La Cisterna">La Cisterna</option>
                <option value="La Florida">La Florida</option>
                <option value="La Granja">La Granja</option>
                <option value="La Pintana">La Pintana</option>
                <option value="La Reina">La Reina</option>
                <option value="Las Condes">Las Condes</option>
                <option value="Lo Barnechea">Lo Barnechea</option>
                <option value="Lo Espejo">Lo Espejo</option>
                <option value="Lo Prado">Lo Prado</option>
                <option value="Macul">Macul</option>
                <option value="Maipu">Maipú</option>
                <option value="Ñuñoa">Ñuñoa</option>
                <option value="Pedro Aguirre Cerda">Pedro Aguirre Cerda</option>
                <option value="Peñalolen">Peñalolén</option>
                <option value="Providencia">Providencia</option>
                <option value="Pudahuel">Pudahuel</option>
                <option value="Puente Alto">Puente Alto</option>
                <option value="Quilicura">Quilicura</option>
                <option value="Quinta Normal">Quinta Normal</option>
                <option value="Recoleta">Recoleta</option>
                <option value="Renca">Renca</option>
                <option value="San Bernardo">San Bernardo</option>
                <option value="San Joaquin">San Joaquín</option>
                <option value="San Jose de Maipo">San José de Maipo</option>
                <option value="San Miguel">San Miguel</option>
                <option value="San Ramon">San Ramón</option>
                <option value="Santiago Centro">Santiago Centro</option>
                <option value="Vitacura">Vitacura</option>
            </select>
            <p id="comuna-error" class="error-message"></p>

            <input type="text" id="street" class="registro-input" placeholder="Calle" required>
            <p id="street-error" class="error-message"></p>

            <input type="text" id="street-number" class="registro-input" placeholder="Número" required>
            <p id="street-number-error" class="error-message"></p>

            <input type="text" id="additional-info" class="registro-input" placeholder="Información adicional">

            <hr>

            <!-- Sección: Patologías -->
            <h3 class="registro-subtitulo">Patologías</h3>
            <div id="conditions-container">
                <table border="1">
                    <thead>
                        <tr>
                            <th>Nombre de la Patología</th>
                            <th>Seleccionar</th>
                        </tr>
                    </thead>
                    <tbody id="conditionsTableBody">
                        <!-- Las patologías se insertarán aquí dinámicamente -->
                    </tbody>
                </table>
            </div>

            <button id="save-changes" class="registro-boton">Guardar cambios</button>
            <a id="go-back" href="/account" class="btn btn-primary">Volver</a>
        </div>
    </main>
    <%- include('partials/first-nav') %>
    <%- include('partials/footer') %>
    <script src="/js/popup.js"></script>
    <script src="/js/crudManager.js"></script>
    <script src="/js/global.js"></script>
    
    <script>
        let initialUserConditions = new Set();
        let originalPasswordHash = null;
    
        // Poblar los datos del usuario desde la base de datos utilizando crudManager
        async function loadUserData() {
            let user = JSON.parse(sessionStorage.getItem('user')) || {};
            let userId = user.userId;

            if (!userId) {
                showPopup("⚠️ No se pudo identificar al usuario. Intenta iniciar sesión nuevamente.");
                window.location.href = "/";
                return;
            }

            try {
                // Obtener los datos del usuario desde la base de datos usando `fetchUsers()`
                const userData = await fetchUsers({ column: "user_id", value: userId });

                if (!userData.rows || userData.rows.length === 0) {
                    throw new Error("No se encontró información del usuario.");
                }

                const userDetails = userData.rows[0];

                // Poblar los campos del formulario con los datos obtenidos
                document.getElementById('email').value = userDetails[2] || ""; // Email
                document.getElementById('password').value = userDetails[3]; // Contraseña
                originalPasswordHash = userDetails[3]; // 💾 Guardar el hash original
                document.getElementById('first-name').value = userDetails[4] || "";
                document.getElementById('last-name').value = userDetails[5] || "";
                document.getElementById('birth-date').value = formatDateInput(userDetails[6]);
                document.getElementById('mobile-phone').value = userDetails[11] || "";
                document.getElementById('rut').value = userDetails[1] || "";
                document.getElementById('region').value = userDetails[7] || "";
                document.getElementById('comuna').value = userDetails[8] || "";
                document.getElementById('street').value = userDetails[9] || "";
                document.getElementById('street-number').value = userDetails[10] || "";
                document.getElementById('additional-info').value = userDetails[12] || "";

                // Comprobar si el usuario se registró con Google (verificando si la contraseña es NULL)
                if (!userDetails[3]) { // Si la contraseña es NULL, el usuario se registró con Google
                    document.getElementById('email').disabled = true;

                    // Ocultar completamente el campo de contraseña
                    document.getElementById("password").style.display = "none";
                    document.getElementById("password-tip").style.display = "none";
                    document.getElementById("edit-password-btn").style.display = "none";
                }


            } catch (error) {
                console.error("⚠️ Error al cargar los datos del usuario:", error);
                showPopup("⚠️ Hubo un error al obtener los datos del usuario. Inténtalo nuevamente.");
            }
        }
    
        // Cargar todas las patologías desde la base de datos
        async function loadConditionsFromDB() {
            const response = await fetchConditions();
            console.log("📌 Patologías obtenidas:", response);
    
            const conditions = response.rows || [];
            const tableBody = document.getElementById('conditionsTableBody');
            tableBody.innerHTML = '';
    
            conditions.forEach(condition => {
                const conditionId = condition[0];
                const conditionName = condition[1];
    
                tableBody.innerHTML += `<tr>
                    <td>${conditionName}</td>
                    <td><input type="checkbox" class="conditionCheckbox" data-condition-id="${conditionId}"></td>
                </tr>`;
            });
    
            // Ahora que los checkboxes están en el DOM, cargar las patologías del usuario
            await loadUserConditions();
        }
    
        // Cargar las patologías del usuario y marcar los checkboxes
        async function loadUserConditions() {
            let user = JSON.parse(sessionStorage.getItem('user')) || {};
            const userId = user.userId;
    
            if (!userId) {
                showPopup("⚠️ Por favor, inicia sesión.");
                return;
            }
    
            const response = await fetchUserConditions(userId);
            console.log("📌 Respuesta de fetchUserConditions:", response);
    
            const conditions = response.rows || [];
            initialUserConditions.clear();
    
            document.querySelectorAll('.conditionCheckbox').forEach(checkbox => {
                checkbox.checked = false; // Desmarcar todo antes de marcar lo correcto
            });
    
            conditions.forEach(condition => {
                const conditionId = condition[1]; // ID de la patología
                const checkbox = document.querySelector(`.conditionCheckbox[data-condition-id='${conditionId}']`);
    
                if (checkbox) {
                    checkbox.checked = true;
                    initialUserConditions.add(conditionId.toString());
                }
            });
        }
    
        // Guardar los cambios de patologías del usuario
        async function saveUserConditions() {
            let user = JSON.parse(sessionStorage.getItem('user')) || {};
            const userId = user.userId;
    
            if (!userId) {
                showPopup("⚠️ No se pudo identificar al usuario.");
                return;
            }
    
            const checkboxes = document.querySelectorAll('.conditionCheckbox');
            let newUserConditions = new Set();
    
            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    newUserConditions.add(checkbox.getAttribute('data-condition-id'));
                }
            });
    
            // Comparar cambios y solo actualizar si es necesario
            for (const conditionId of newUserConditions) {
                if (!initialUserConditions.has(conditionId)) {
                    await assignUserCondition(userId, conditionId);
                }
            }
    
            for (const conditionId of initialUserConditions) {
                if (!newUserConditions.has(conditionId)) {
                    await removeUserCondition(userId, conditionId);
                }
            }
    
            initialUserConditions = newUserConditions; // Actualizar estado inicial
        }

        function displayErrors(errors) {
            // Limpiar errores anteriores
            document.querySelectorAll(".error-message").forEach(msg => msg.textContent = "");
            document.querySelectorAll(".registro-input").forEach(input => input.classList.remove("error"));

            // Asegurar que el tip de la contraseña se muestre por defecto
            const passwordTip = document.getElementById("password-tip");
            if (passwordTip) {
                passwordTip.style.display = "block";
            }

            for (const field in errors) {
                const inputField = document.getElementById(field);
                const errorMessage = document.getElementById(`${field}-error`);

                if (inputField) {
                    inputField.classList.add("error");
                }

                if (errorMessage) {
                    errorMessage.textContent = errors[field];
                    errorMessage.style.color = "red";
                }

                // Ocultar el tip si el error es en la contraseña
                if (field === "password" && passwordTip) {
                    passwordTip.style.display = "none";
                }
            }
        }

        // Limpiar los mensajes de error y estilos de los campos
        function clearFormErrors() {
            document.querySelectorAll(".error-message").forEach(msg => msg.textContent = "");
            document.querySelectorAll(".registro-input").forEach(input => input.classList.remove("error"));

            const passwordTip = document.getElementById("password-tip");
            if (passwordTip) {
                passwordTip.style.display = "block";
            }
        }

        // Guardar cambios del usuario en la base de datos
        async function saveUserChanges() {
            let user = JSON.parse(sessionStorage.getItem('user')) || {};
            let userId = user.userId;
            let active = user.active;
            let userRole = user.role;

            if (!userId) {
                showPopup("⚠️ No se pudo identificar al usuario. Intenta iniciar sesión nuevamente.");
                return;
            }

            console.log("📌 UserID antes de la actualización:", userId);

            const updatedUserData = {
                user_id: userId, // ✅ Se corrige el nombre del campo
                rut: document.getElementById("rut").value,
                email: document.getElementById("email").value,
                password: user.googleAuth ? null : document.getElementById("password").value,
                first_name: document.getElementById("first-name").value,
                last_name: document.getElementById("last-name").value,
                birth_date: document.getElementById("birth-date").value,
                mobile_phone: document.getElementById("mobile-phone").value,
                city: "Santiago",
                district: document.getElementById("comuna").value,
                street: document.getElementById("street").value,
                street_number: document.getElementById("street-number").value,
                additional_address_info: document.getElementById("additional-info").value,
                active: active,
                user_role: 'customer'
            };

            try {
                console.log("📌 Datos enviados en la actualización:", updatedUserData);

                // 📌 Validar antes de guardar
                const userData = {
                rut: updatedUserData.rut.trim(),
                email: updatedUserData.email.trim(),
                password: updatedUserData.password !== null ? updatedUserData.password.trim() : null,
                first_name: updatedUserData.first_name.trim(),
                last_name: updatedUserData.last_name.trim(),
                birth_date: updatedUserData.birth_date,
                city: updatedUserData.city,
                district: updatedUserData.district,
                street: updatedUserData.street.trim(),
                street_number: updatedUserData.street_number.trim(),
                mobile_phone: updatedUserData.mobile_phone.trim(),
                additional_address_info: updatedUserData.additional_address_info.trim(),
                active: updatedUserData.active,
                user_role: updatedUserData.user_role
            };

            // Validar antes de guardar
            const inputErrors = validateUserForm(userData);

            if (Object.keys(inputErrors).length > 0) {
                displayErrors(inputErrors);
                return;
            }

            const validationData = {
                ...userData,
                original_email: user.email,
                original_rut: user.rut
            };

            const errors = await validateUserFormAsync(validationData, true);

            if (Object.keys(errors).length > 0) {
                displayErrors(errors);
                return;
            }

                // Se usa crudManager.updateUser en vez de fetch manual
                const updateResponse = await updateUser(updatedUserData);

                // si la respuesta es un error 400, mostrar errores
                if (updateResponse.status === 400) {
                    showPopup(updateResponse.error);
                    return;
                }

                console.log("📌 Respuesta del servidor al actualizar usuario:", updateResponse);

                // Convertir los nombres de las claves a camelCase antes de guardarlos en sessionStorage
                const userSessionData = {
                    userId: updatedUserData.user_id,
                    rut: updatedUserData.rut,
                    email: updatedUserData.email,
                    firstName: updatedUserData.first_name,
                    lastName: updatedUserData.last_name,
                    birthDate: updatedUserData.birth_date,
                    mobilePhone: updatedUserData.mobile_phone,
                    city: updatedUserData.city,
                    district: updatedUserData.district,
                    street: updatedUserData.street,
                    streetNumber: updatedUserData.street_number,
                    additionalInfo: updatedUserData.additional_address_info,
                    active: updatedUserData.active,
                    role: updatedUserData.user_role
                };

                sessionStorage.setItem("user", JSON.stringify({ ...user, ...userSessionData }));

                await saveUserConditions();

                showPopup("✅ ¡Tu información ha sido actualizada con éxito!");
                clearFormErrors();
            } catch (error) {
                console.error("⚠️ Error al actualizar usuario:", error);
                showPopup("⚠️ Hubo un error al actualizar los datos. Inténtalo nuevamente.");
            }
        }

        // Mostrar campo de contraseña cuando se presiona el botón "Editar contraseña"
        document.getElementById("edit-password-btn").addEventListener("click", () => {
            const passwordInput = document.getElementById("password");
            const passwordTip = document.getElementById("password-tip");
            const passwordBtn = document.getElementById("edit-password-btn");

            // Mostrar el campo y el tip
            passwordInput.classList.remove("hidden");
            passwordTip.classList.remove("hidden");
            passwordBtn.classList.add("hidden");

            // Limpiar el input (importante para evitar enviar el hash si se va a cambiar)
            passwordInput.value = "";
        });

        // Cargar la vista al iniciar
        document.addEventListener("DOMContentLoaded", async function () {
            loadUserData();
            await loadConditionsFromDB();
            document.getElementById("save-changes").addEventListener("click", saveUserChanges);
        });
    </script>
    <script src="/js/validation.js"></script>
</body>
</html>
